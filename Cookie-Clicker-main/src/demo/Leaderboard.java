/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package demo;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Collections;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.ImageIcon;
import javax.swing.SwingConstants;

/**
 *
 * @author Domen
 */
public class Leaderboard extends javax.swing.JFrame {

    private String firstPlaceUser;
    private double firstPlaceScore;
    private String secondPlaceUser;
    private double secondPlaceScore;
    private String thirdPlaceUser;
    private double thirdPlaceScore;
    String u1;
    String u2;
    String u3;
    String s1;
    String s2;
    String s3;
    String p1;
    String p2;
    String p3;

    /**
     * Creates new form Leaderboard
     */
    public Leaderboard() {
        initComponents();
        setGet();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        picture3 = new javax.swing.JLabel();
        picture2 = new javax.swing.JLabel();
        picture1 = new javax.swing.JLabel();
        score3 = new javax.swing.JLabel();
        score2 = new javax.swing.JLabel();
        score1 = new javax.swing.JLabel();
        user3 = new javax.swing.JLabel();
        user2 = new javax.swing.JLabel();
        user1 = new javax.swing.JLabel();
        back = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(780, 540));
        setMinimumSize(new java.awt.Dimension(780, 540));
        setPreferredSize(new java.awt.Dimension(780, 540));
        setSize(new java.awt.Dimension(780, 540));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        picture3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(picture3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 100, 100));

        picture2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(picture2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, 100, 100));
        getContentPane().add(picture1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, 100, 100));

        score3.setFont(new java.awt.Font("Burbank Big Rg Bd", 1, 18)); // NOI18N
        score3.setForeground(new java.awt.Color(255, 255, 255));
        score3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(score3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 160, 30));

        score2.setFont(new java.awt.Font("Burbank Big Rg Bd", 1, 18)); // NOI18N
        score2.setForeground(new java.awt.Color(255, 255, 255));
        score2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(score2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 230, 160, 30));

        score1.setFont(new java.awt.Font("Burbank Big Rg Bd", 1, 18)); // NOI18N
        score1.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(score1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 160, 30));

        user3.setFont(new java.awt.Font("Burbank Big Rg Bd", 1, 18)); // NOI18N
        user3.setForeground(new java.awt.Color(255, 255, 255));
        user3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(user3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, 160, 30));

        user2.setFont(new java.awt.Font("Burbank Big Rg Bd", 1, 18)); // NOI18N
        user2.setForeground(new java.awt.Color(255, 255, 255));
        user2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(user2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 200, 160, 30));

        user1.setFont(new java.awt.Font("Burbank Big Rg Bd", 1, 18)); // NOI18N
        user1.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(user1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 160, 30));

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slike/back.png"))); // NOI18N
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                backMousePressed(evt);
            }
        });
        getContentPane().add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 410, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slike/stopnice.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, -20, -1, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slike/game.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(-6, -48, 786, 642));

        setSize(new java.awt.Dimension(796, 548));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMousePressed
        new UvodnaStran().setVisible(true);
        dispose();
    }//GEN-LAST:event_backMousePressed

    /**
     * @param args the command line arguments
     */
    public void setGet() {
        this.setTitle("Leaderboard");
        ImageIcon img = new ImageIcon("src/slike/PerfectCookie (1).png");
        this.setIconImage(img.getImage());
        getL();
        user1.setHorizontalAlignment(SwingConstants.CENTER);
        user2.setHorizontalAlignment(SwingConstants.CENTER);
        user3.setHorizontalAlignment(SwingConstants.CENTER);
        score1.setHorizontalAlignment(SwingConstants.CENTER);
        score2.setHorizontalAlignment(SwingConstants.CENTER);
        score3.setHorizontalAlignment(SwingConstants.CENTER);
        picture1.setHorizontalAlignment(SwingConstants.CENTER);
        picture2.setHorizontalAlignment(SwingConstants.CENTER);
        picture3.setHorizontalAlignment(SwingConstants.CENTER);

        u1 = getFirstPlaceUser();
        u2 = getSecondPlaceUser();
        u3 = getThirdPlaceUser();

        s1 = (int) getFirstPlaceScore() + "";
        s2 = (int) getSecondPlaceScore() + "";
        s3 = (int) getThirdPlaceScore() + "";

        user1.setText(u1);
        user2.setText(u2);
        user3.setText(u3);
        score1.setText(s1);
        score2.setText(s2);
        score3.setText(s3);

        getPFP();
        setPFP();
    }

    public void getL() {
        String folderPath = "saves";

        // TreeMap to store user names (file names without .txt) and their corresponding numbers
        TreeMap<Double, String> userNumbers = new TreeMap<>(Collections.reverseOrder());

        // Get all files in the folder
        File folder = new File(folderPath);
        File[] files = folder.listFiles();

        // Read from each file
        for (File file : files) {
            if (file.isFile()) {
                try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                    // Read the first line to extract the number
                    String firstLine = reader.readLine();
                    // Extract only the numeric part of the first line
                    String[] parts = firstLine.split("\t"); // Split by tab character
                    String numericPart = parts[0].trim(); // Get the first part and remove leading/trailing whitespace
                    // Convert the numeric part to a double
                    double number = Double.parseDouble(numericPart);
                    // Extract the user name (file name without .txt)
                    String userName = file.getName().replace(".txt", "");
                    // Store the number and user name in the TreeMap
                    userNumbers.put(number, userName);
                } catch (IOException | NumberFormatException | ArrayIndexOutOfBoundsException e) {
                    System.err.println("Error reading from file: " + file.getAbsolutePath());
                    e.printStackTrace();
                }
            }
        }

        // Get the details of the top 3 users with the largest numbers
        int count = 0;
        for (Map.Entry<Double, String> entry : userNumbers.entrySet()) {
            if (count < 3) {
                double number = entry.getKey();
                String userName = entry.getValue();
                // Store the information into appropriate variables
                if (count == 0) {
                    firstPlaceUser = userName;
                    firstPlaceScore = number;
                } else if (count == 1) {
                    secondPlaceUser = userName;
                    secondPlaceScore = number;
                } else if (count == 2) {
                    thirdPlaceUser = userName;
                    thirdPlaceScore = number;
                }
                count++;
            } else {
                break;
            }
        }
    }

    // Getter methods to access the variables
    public String getFirstPlaceUser() {
        return firstPlaceUser;
    }

    public double getFirstPlaceScore() {
        return firstPlaceScore;
    }

    public String getSecondPlaceUser() {
        return secondPlaceUser;
    }

    public double getSecondPlaceScore() {
        return secondPlaceScore;
    }

    public String getThirdPlaceUser() {
        return thirdPlaceUser;
    }

    public double getThirdPlaceScore() {
        return thirdPlaceScore;
    }

    public void getPFP() {
        String[] targetUsers = {u1, u2, u3};

        // Path to the UserData.txt file
        String filePath = "UserData.txt";

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            // Read each line of the file
            while ((line = reader.readLine()) != null) {
                // Split the line into parts using #
                String[] parts = line.split("#");
                // Check if the user in the current line matches any of the target users
                for (String targetUser : targetUsers) {
                    if (parts.length > 1 && parts[1].equals(targetUser)) {
                        // If there is a match, retrieve the profile picture from parts[14]
                        String profilePicture = parts[14];
                        // Assign the profile picture to the corresponding variable
                        if (targetUser.equals(u1)) {
                            p1 = profilePicture;
                        } else if (targetUser.equals(u2)) {
                            p2 = profilePicture;
                        } else if (targetUser.equals(u3)) {
                            p3 = profilePicture;
                        }
                        break; // Stop searching for this user once found
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
    }

    public void setPFP() {
        ImageIcon img = new ImageIcon(p1);

        // Get the original image dimensions
        int originalWidth = img.getIconWidth();
        int originalHeight = img.getIconHeight();

        // Calculate the scaling ratio
        double scaleRatio = Math.min(100.0 / originalWidth, 100.0 / originalHeight);

        // Calculate the scaled dimensions
        int scaledWidth = (int) (originalWidth * scaleRatio);
        int scaledHeight = (int) (originalHeight * scaleRatio);

        // Scale the image
        Image scaledImage = img.getImage().getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);

        // Set the scaled image to the label
        picture1.setIcon(new ImageIcon(scaledImage));

        ImageIcon img2 = new ImageIcon(p2);
        int originalWidth2 = img2.getIconWidth();
        int originalHeight2 = img2.getIconHeight();
        double scaleRatio2 = Math.min(100.0 / originalWidth2, 100.0 / originalHeight2);
        int scaledWidth2 = (int) (originalWidth2 * scaleRatio2);
        int scaledHeight2 = (int) (originalHeight2 * scaleRatio2);
        Image scaledImage2 = img2.getImage().getScaledInstance(scaledWidth2, scaledHeight2, Image.SCALE_SMOOTH);
        picture2.setIcon(new ImageIcon(scaledImage2));

// Scale the image for p3
        ImageIcon img3 = new ImageIcon(p3);
        int originalWidth3 = img3.getIconWidth();
        int originalHeight3 = img3.getIconHeight();
        double scaleRatio3 = Math.min(100.0 / originalWidth3, 100.0 / originalHeight3);
        int scaledWidth3 = (int) (originalWidth3 * scaleRatio3);
        int scaledHeight3 = (int) (originalHeight3 * scaleRatio3);
        Image scaledImage3 = img3.getImage().getScaledInstance(scaledWidth3, scaledHeight3, Image.SCALE_SMOOTH);
        picture3.setIcon(new ImageIcon(scaledImage3));
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Leaderboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Leaderboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Leaderboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Leaderboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Leaderboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.JLabel background;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel picture1;
    private javax.swing.JLabel picture2;
    private javax.swing.JLabel picture3;
    private javax.swing.JLabel score1;
    private javax.swing.JLabel score2;
    private javax.swing.JLabel score3;
    private javax.swing.JLabel user1;
    private javax.swing.JLabel user2;
    private javax.swing.JLabel user3;
    // End of variables declaration//GEN-END:variables
}
